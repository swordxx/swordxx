/******************************************************************************
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation version 2.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 */

#ifndef SWORDXX_VERSION_H
#define SWORDXX_VERSION_H

#include <cstdint>
#include <string>


namespace swordxx {

using Version = std::uint32_t;

#define SWORDXX_VERSION @SWORDXX_VERSION_C@;
#define SWORDXX_VERSION_STR "@SWORDXX_VERSION@"

Version runtimeVersion() noexcept;
std::string const & runtimeVersionStr() noexcept;

bool isValidSwordVersion(char const * swordVersion) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
int compareVersions(char const * a, char const * b) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
bool versionEqual(char const * a, char const * b) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
bool versionNotEqual(char const * a, char const * b) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
bool versionLess(char const * a, char const * b) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
bool versionLessEqual(char const * a, char const * b) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
bool versionGreater(char const * a, char const * b) noexcept;

/// \pre isValidSwordVersion(a) && isValidSwordVersion(b)
bool versionGreaterEqual(char const * a, char const * b) noexcept;

bool isCompatibleWithSwordVersion(char const * swordVersion) noexcept;

} /* namespace swordxx { */

#endif /* SWORDXX_VERSION_H */
