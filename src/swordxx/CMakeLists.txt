# Find required packages:
FIND_PACKAGE(BZip2 REQUIRED)
FIND_PACKAGE(CURL REQUIRED COMPONENTS HTTP HTTPS FTP OPTIONAL_COMPONENTS SFTP)
FIND_PACKAGE(ICU REQUIRED COMPONENTS data i18n uc)
FIND_PACKAGE(LibLZMA REQUIRED)
FIND_PACKAGE(ZLIB REQUIRED)

# Find source files:
FILE(GLOB_RECURSE SWORDXX_C_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/*.c")
FILE(GLOB_RECURSE SWORDXX_CXX_SOURCES "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
FILE(GLOB_RECURSE SWORDXX_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/*.h")

# Generate the version.h header:
SET(SWORDXX_VERSION_H_FILE "${CMAKE_BINARY_DIR}/include/swordxx/version.h")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/version.h.in"
               "${SWORDXX_VERSION_H_FILE}" @ONLY)

# Configure build of shared library:
ADD_LIBRARY(swordxx SHARED)
ADD_LIBRARY(Swordxx::swordxx ALIAS swordxx)
TARGET_SOURCES(swordxx
    PRIVATE ${SWORDXX_C_SOURCES} ${SWORDXX_CXX_SOURCES} ${SWORDXX_HEADERS})
TARGET_LINK_LIBRARIES(swordxx
    PRIVATE
        BZip2::BZip2
        CURL::libcurl
        ICU::data
        ICU::i18n
        ICU::uc
        LibLZMA::LibLZMA
        ZLIB::ZLIB
)
TARGET_INCLUDE_DIRECTORIES(swordxx
    PUBLIC
        "$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/..>"
        "$<INSTALL_INTERFACE:${SWORDXX_INCLUDE_INSTALL_PREFIX}>"
)
TARGET_COMPILE_DEFINITIONS(swordxx
    PRIVATE
        "SWORDXX_CURL_HAS_SFTP=$<BOOL:CURL_SFTP_FOUND>"
        "SWORDXX_SWORD_COMPAT_VERSION=\"${SWORDXX_SWORD_COMPAT_VERSION}\""
        "SWORDXX_SYSCONF_INSTALL_PREFIX=\"${SWORDXX_SYSCONF_INSTALL_PREFIX}\""
        "SWORDXX_VERSION_H_FILE=\"${SWORDXX_VERSION_H_FILE}\""
)
IF(DEFINED SWORDXX_SOVERSION_OVERRIDE)
  SET(LIBSWORDXX_SOVERSION "${SWORDXX_SOVERSION_OVERRIDE}")
ELSE()
  SET(LIBSWORDXX_SOVERSION "${SWORDXX_VERSION}")
ENDIF()
SET_TARGET_PROPERTIES(swordxx PROPERTIES SOVERSION "${LIBSWORDXX_SOVERSION}")
MESSAGE(STATUS "Using shared library SOVERSION \"${LIBSWORDXX_SOVERSION}\"")

# Install shared library:
INSTALL(TARGETS swordxx
        EXPORT swordxx
        LIBRARY DESTINATION "${SWORDXX_LIB_INSTALL_PREFIX}")
INSTALL(EXPORT swordxx
        FILE SwordxxTargets_swordxx.cmake
        NAMESPACE Swordxx::
        DESTINATION "${SWORDXX_LIB_INSTALL_PREFIX}/cmake/swordxx")

# Install the headers:
INSTALL(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/"
        DESTINATION "${SWORDXX_INCLUDE_INSTALL_PREFIX}/swordxx"
        FILES_MATCHING PATTERN "*.h")
INSTALL(FILES "${SWORDXX_VERSION_H_FILE}"
        DESTINATION "${SWORDXX_INCLUDE_INSTALL_PREFIX}/swordxx")

# Generate and install the sysconf file:
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/swordxx.conf.in"
               "${CMAKE_CURRENT_BINARY_DIR}/swordxx.conf" @ONLY)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/swordxx.conf"
        DESTINATION "${SWORDXX_SYSCONF_INSTALL_PREFIX}")

# Install an empty mods.d directory:
SET(SWORDXX_MODULES_INSTALL_PREFIX
    "${SWORDXX_SHARE_INSTALL_PREFIX}/swordxx/mods.d")
INSTALL(DIRECTORY DESTINATION "${SWORDXX_MODULES_INSTALL_PREFIX}")

# Install the locales:
SET(SWORDXX_LOCALES_INSTALL_PREFIX
    "${SWORDXX_SHARE_INSTALL_PREFIX}/swordxx/locales.d")
INSTALL(DIRECTORY "${CMAKE_SOURCE_DIR}/locales.d/"
        DESTINATION "${SWORDXX_LOCALES_INSTALL_PREFIX}")

# Generate and install SwordxxConfig.cmake and SwordxxConfigVersion.cmake:
INCLUDE(CMakePackageConfigHelpers)
SET(SWORDXX_LOCALES_INSTALL_DIR
    "${SWORDXX_SHARE_INSTALL_PREFIX}/swordxx/locales.d")
CONFIGURE_PACKAGE_CONFIG_FILE(
    "${CMAKE_CURRENT_SOURCE_DIR}/SwordxxConfig.cmake.in"
    "${CMAKE_CURRENT_BINARY_DIR}/SwordxxConfig.cmake"
    INSTALL_DESTINATION "${SWORDXX_LIB_INSTALL_PREFIX}/cmake/swordxx"
    PATH_VARS
        SWORDXX_SYSCONF_INSTALL_PREFIX
        SWORDXX_MODULES_INSTALL_PREFIX
        SWORDXX_LOCALES_INSTALL_PREFIX
)
WRITE_BASIC_PACKAGE_VERSION_FILE(
    "${CMAKE_CURRENT_BINARY_DIR}/SwordxxConfigVersion.cmake"
    COMPATIBILITY AnyNewerVersion)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/SwordxxConfig.cmake"
              "${CMAKE_CURRENT_BINARY_DIR}/SwordxxConfigVersion.cmake"
        DESTINATION "${SWORDXX_LIB_INSTALL_PREFIX}/cmake/swordxx")

# Generate and install swordxx.pc:
SET(SWORDXX_PC_LIBS "-L${SWORDXX_LIB_INSTALL_PREFIX} -lswordxx")
SET(SWORDXX_PC_CFLAGS "-I${SWORDXX_INCLUDE_INSTALL_PREFIX}")
CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/swordxx.pc.in"
               "${CMAKE_CURRENT_BINARY_DIR}/swordxx.pc" @ONLY)
INSTALL(FILES "${CMAKE_CURRENT_BINARY_DIR}/swordxx.pc"
        DESTINATION "${SWORDXX_LIB_INSTALL_PREFIX}/pkgconfig")

