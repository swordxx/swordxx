# Calculate version strings for code:
FUNCTION(CalculateVersionForCode in out)
    SET(hexdigit "[0123456789abcdefABCDEF]")
    SET(hexnumber "0|[123456789abcdefABCDEF]${hexdigit}*")
    SET(hexversion "^(${hexnumber})\\.(${hexnumber})\\.(${hexnumber})$")
    STRING(REGEX MATCHALL "${hexversion}" r "${in}")
    IF(NOT r)
      MESSAGE(FATAL_ERROR "Invalid version string in \${SWORDXX_VERSION}!")
    ENDIF()
    UNSET(r)
    SET(major "${CMAKE_MATCH_1}")
    SET(minor "${CMAKE_MATCH_2}")
    SET(patch "${CMAKE_MATCH_3}")
    SET("${out}" "(((${major}*65536u)+${minor})*65536u)+${patch}" PARENT_SCOPE)
ENDFUNCTION()

MACRO(SwordxxHandleConditionalBuild name cond defaultValue linking)
    IF(NOT (DEFINED "SWORDXX_BUILD_${cond}"))
        SET("SWORDXX_BUILD_${cond}" "${defaultValue}")
    ENDIF()
    IF(SWORDXX_BUILD_${cond})
        MESSAGE(STATUS "Building ${name}: yes")
        SET("SWORDXX_${cond}_EXCLUDE" "")
    ELSE()
        MESSAGE(STATUS "Building ${name}: no")
        SET("SWORDXX_${cond}_EXCLUDE" EXCLUDE_FROM_ALL)
    ENDIF()
ENDMACRO()
